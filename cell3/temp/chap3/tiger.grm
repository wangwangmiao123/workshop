%{
#include <stdio.h>
#include "util.h"
#include "errormsg.h"

int yylex(void); /* function prototype */

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}

%union {
	int pos;
	int ival;
	string sval;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%start program
%left PLUS MINUS
%left TIMES DIVIDE
%nonassoc UMINUS /*highest!*/

%%

program:    exp
exp:    ID
   |    NIL
   |    INT
   |    STRING
   |    expseq
   |    exp PLUS exp
   |    exp MINUS exp
   |    exp TIMES exp
   |    exp DIVIDE exp
   |    MINUS INT %prec UMINUS
   |    LET decs IN expseq END
   |    IF exp THEN exp
   |    IF exp THEN exp ELSE exp
   |    WHILE exp DO exp
   |    FOR ID ASSIGN exp TO exp DO exp
   |    BREAK SEMICOLON
   |    exp NEQ exp
   |    exp EQ exp
   |    exp GT exp
   |    exp GE exp
   |    exp LE exp 
   |    exp LT exp
   |    exp AND exp  
   |    exp OR exp
   |    ID LPAREN lvlist RPAREN
   |    ID LBRACE inilist RBRACE 
   |    ID LBRACK exp RBRACK OF exp 
   |    lvalue ASSIGN exp
   ;

lvlist:
    |   lvalue    
    |   lvlist COMMA lvalue
    ;
inilist:    
    |       iniexp
    |       inilist COMMA iniexp
    ;

iniexp: ID EQ exp;

expseq  :  LPAREN expseq SEMICOLON exp RPAREN
        |   exp
        ;

decs:
    |  decs dec
    |  dec
    ;

dec:    tydec
   |    vardec
   |    fundec
   ;

tydec:  TYPE ID EQ ty

ty: ID
  | LBRACE typefields RBRACE
  | LBRACE RBRACE
  | ARRAY OF ID
  ;


typefields:
          | ID COLON ID COMMA typefields
          | ID COLON ID
          ;
 
#vardec: VAR ID ASSIGN exp ;

fundec: FUNCTION ID LPAREN typefields RPAREN EQ exp
      | FUNCTION ID LPAREN typefields RPAREN COLON ID EQ exp
      ;

lvalue :    ID
       |    lvalue DOT ID
       |    lvalue LBRACK exp RBRACK
       ;

